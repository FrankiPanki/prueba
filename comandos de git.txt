git config --global user.name "John Doe" -> configurar usuario
git config --global user.email johndoe@example.com -> configurar correo
git init -> decir a git que gestione el directorio
git add . -> agregar todos los cambios nuevos
git add nombreArchivo -> agrega un archivo en particular al stage
git add *algo -> agrega lo que sea concatenado con algo
git reset nombreArchivo -> remueve el archivo indicado del stage
git commit -m "cambios" -> comentar los cambios
git commit --amend -m "cambio de commit" -> se cambia el ultimo commit 
git status -> ver el estatus del repositorio (cosas que ya se agregaron y cosas que no)
git checkout . -> volver a va version anterior
git log -> ver los commits que se han hecho
git mv nombreAnterior nombreNuevo -> cambia el nombre de un archivo
git rm nombreArchivo -> nombre del archivo que se removio
git reset --hard commitAlQueSeQuiereRegresar(codigo del log) -> se regresa el repositorio  al punto del commit indicado
git reset --soft commitAlQueSeQuiereRegresar(codigo del log) -> se muestra el repositorio  al punto del commit indicado (solo se ven los cambios, no se recuperan los archivos)
git reflog -> se ven todos los cambios inclusive si se hizo un reset
git  branch nombre -> crea una rama (se copian todos los archivos de master y los ultimos que se agreguen ahi no se ven en master)
git checkout rama -> cambia apuntador a la rama especificada (todos los cambios se hacen dentro de esa rama a menos que se cambie de rama)
git merge nombre -> se mezclan los archivos de donde esta el apuntador actualmente con el nombre de la rama especificada
git branch -d nombre -> borra la rama especificada
git log --oneline --decorate --graph -> muestra los commits de todas las ramas
git checkout -b nombre -> crea una nueva rama con el aputador a esta
git tag "nombreEtiqueta" -> etiquta (sirve para poner una version) 
git tag -d "nombreEtiqueta" -> borra la etiqueta 
git tag -a "nombreEtiqueta" -m ->comenta la equiqueta
git show -> muestra toodos los commits hechos desde la ultima etiquetacion
git remote add origin rutaRepositorio-> agrega la ruta del repositorio de github
git push -u origin master -> sube lo que hay en el stage a github

--pedir credenciales siempre---
windows ingreesar a 
Para msysGit: %ProgramFiles(x86)%\Git\etc\gitconfig
Para Git para Windows (64 bit): %ProgramFiles%\Git\mingw64\etc\gitconfig
Para gits nativos de MSYS2: [MSYS2-install-path]\etc\gitconfig

en el area de [credencial] agregar la variable
iteractive = always 
--------------------------------

jitpack -> https://jitpack.io/

--->comando de maven para instalar una libreria y ocuparla como dependencia
 	mvn install:install-file "-Dfile = C:\Users\dani3\Downloads\gs-ui-1.3\gs-ui-1.3\gs-ui-1.3.jar" "-DgroupId=com.graphstream" "-DartifactId=gs-ui" "-Dversion=1.3" "-Dpackaging=jar"

userTimezone=true&serverTimezone=UTC
C:\Program Files\MySQL\MySQL Server 8.0\bin

jdbc:mysql://localhost:3306/sistema_colaborativo?userTimezone=true&serverTimezone=UTC
jdbc:mysql://localhost:3306/prueba?userTimezone=true&amp;serverTimezone=UTC
com.mysql.jdbc.Driver
netstat -aon | find ":8080" | find "LISTENING"
Database URL	jdbc:postgresql://localhost:5432/SISTEMACOLABORATIVO

insert into horario (dia, horainicio, horafin, fk_id_profesor), values ('viernes', '12:00', '13:00',)
    <bean id="ProfesorDAO" class="mx.unam.ciencias.is.sistemacolaborativo.modelo.HorarioDAO" p:sessionFactory-ref="hibernate4AnnotatedSessionFactory"/>
                <value>mx.unam.ciencias.is.sistemacolaborativo.mapeobd.Horario</value>
